import sys
import os

try:
    from sentence_transformers import SentenceTransformer
    print("‚úÖ SentenceTransformer importado correctamente")
except ImportError as e:
    print(f"‚ùå Error importando SentenceTransformer: {e}")
    print("üí° Instala con: pip install sentence-transformers")
    sys.exit(1)

# A√±adir ruta para importar conexion
sys.path.append(os.path.abspath("."))

try:
    # Importar datos conectados
    from conexion import dataset_conexion
    print(f"‚úÖ Dataset de conexi√≥n importado: {len(dataset_conexion)} elementos")
except ImportError as e:
    print(f"‚ùå Error importando dataset_conexion: {e}")
    sys.exit(1)

try:
    # Inicializar modelo de embeddings para texto
    modelo_texto = SentenceTransformer('all-MiniLM-L6-v2')
    print("‚úÖ Modelo de embeddings de conexi√≥n cargado")
except Exception as e:
    print(f"‚ùå Error cargando modelo: {e}")
    sys.exit(1)

try:
    # Preparar textos para embeddings (solo t√≠tulos)
    textos_titulos = []
    
    for registro in dataset_conexion:
        titulo = registro['titulo']
        textos_titulos.append(titulo)
    
    print(f"üîÑ Generando embeddings para {len(textos_titulos)} t√≠tulos conectados...")
    
    # Generar embeddings solo de t√≠tulos
    embeddings_titulos = modelo_texto.encode(textos_titulos)
    print(f"‚úÖ Embeddings generados: {embeddings_titulos.shape}")
    
    # Crear dataset con embeddings
    dataset_con_embeddings = []
    for i, registro in enumerate(dataset_conexion):
        dataset_con_embeddings.append({
            'titulo': registro['titulo'],
            'descripcion': registro['descripcion'],  # Agregar descripci√≥n
            'archivo_imagen': registro['archivo_imagen'],
            'tokens_procesados': registro['tokens_procesados'],
            'indice_texto': registro['indice_texto'],
            'indice_img': registro['indice_img'],
            'embedding_titulo': embeddings_titulos[i]
        })
    
    print(f"‚úÖ Dataset con embeddings creado: {len(dataset_con_embeddings)} registros")
    print("üéâ Generaci√≥n de embeddings de conexi√≥n completada exitosamente")
    
except Exception as e:
    print(f"‚ùå Error generando embeddings de conexi√≥n: {e}")
    sys.exit(1)
